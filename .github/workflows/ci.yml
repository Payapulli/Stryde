name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:run
    
    - name: Build application
      run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run tests
      working-directory: ./backend
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        pytest tests/ -v
    
    - name: Test server startup
      working-directory: ./backend
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python -c "import main; print('✅ Backend imports successfully')"

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -c "
        import uvicorn
        import threading
        import time
        
        def start_server():
            uvicorn.run('main:app', host='127.0.0.1', port=8000, log_level='error')
        
        server_thread = threading.Thread(target=start_server)
        server_thread.daemon = True
        server_thread.start()
        time.sleep(3)
        print('Backend server started')
        "
    
    - name: Test backend connectivity
      run: |
        sleep 5
        curl -f http://localhost:8000/ping || exit 1
        echo "✅ Backend is responding"
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Test frontend build
      run: |
        if [ -d "frontend/dist" ]; then
          echo "✅ Frontend build successful"
        else
          echo "❌ Frontend build failed"
          exit 1
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
    
    - name: Deploy to Vercel (Backend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_BACKEND_PROJECT_ID }}
        working-directory: ./backend
